from pyface.api import MessageDialog
from traits.api import HasTraits, File, Instance, List, Str, Int, Event, Dict, Bool
from traitsui.api import View, Group, VGroup, HGroup, ButtonEditor, Item, EnumEditor

from simphony.cuds.abc_modeling_engine import ABCModelingEngine
from simphony_mayavi.plugins.engine_manager import EngineManager


class AddEnginePanel(HasTraits):
    ''' A panel to load a new modeling engine from a *.py file
    or from a wizard and then send it to an EngineManager class
    by calling ``EngineManager.add_engine``
    '''

    engine_manager = Instance(EngineManager)

    # Name of the panel
    label = "Add Engine"

    # Load from a python script
    file_name = File
    loaded_variables = Dict
    loaded_variables_names = List(Str)
    selected_variable_name = Str

    # Instantiate from a factory
    factory_names = List(Str)
    factory_name = Str

    # user needs to name the engine before adding
    # it to the EngineManager
    # check if the name is valid and display a message
    new_engine_name = Str
    engine_name_is_valid = Bool(False)
    engine_name_status = Str("")

    # the new engine to be added
    new_engine = Instance(ABCModelingEngine)

    # Add engine!
    add_engine = Event
    
    panel_view = View(
        VGroup(
            Group(
                Item("file_name", label="Python script"),
                Item("selected_variable_name",
                     visible_when="loaded_variables_names",
                     label="Choose",
                     editor=EnumEditor(name="loaded_variables_names")),
                label="Load from file",
                show_border=True),
            Group(
                Item("factory_name", editor=EnumEditor()),
                label="Load from factory",
                show_border=True),
            Item("new_engine_name"),
            HGroup(
                Item("add_engine",
                     show_label=False,
                     enabled_when="engine_name_is_valid and new_engine",
                     editor=ButtonEditor(label="Add engine")),
                Item("engine_name_status",
                     style="readonly", show_label=False),
            )
        )
    )

    def _add_engine_fired(self):
        self.engine_manager.add_engine(str(self.new_engine_name),
                                       self.new_engine)
        self.new_engine_name = ""

    def _file_name_changed(self):
        message_dialog = MessageDialog()
        
        if not self.file_name.endswith(".py"):
            message_dialog.error("Not a *.py file")
            self.loadded_variables_names = []
            return

        try:
            local_vars = self._exec_python_file(self.file_name)
        except Exception as exception:
            message_dialog.error(exception.message)
        else:
            # only keep the local variables that are
            # instances of ABCModelingEngine
            self.loaded_variables = {name: value
                                     for name, value in local_vars.items()
                                     if isinstance(value, ABCModelingEngine)}
            self.loaded_variables_names = self.loaded_variables.keys()
            if len(self.loaded_variables_names) == 0:
                message_dialog.error("No instance of ABCModelingEngine found")

    def _selected_variable_name_changed(self):
        self.new_engine = self.loaded_variables[self.selected_variable_name]

    def _exec_python_file(self, file_name):
        global_vars = {}
        local_vars = {}
        with open(file_name, "r") as f:
            exec(f, global_vars, local_vars)
        return local_vars

    def _new_engine_name_changed(self):
        self.engine_name_is_valid = False
        self.engine_name_status = ""
        
        if (self.new_engine_name and
                self.new_engine_name not in self.engine_manager.engines):
            self.engine_name_is_valid = True
            self.engine_name_status = "OK!"
        elif self.new_engine_name:
            self.engine_name_status = "Already exist"
